# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>
from __python__ import hash_literals, bound_methods

from gettext import gettext as _
from dom import svgicon, ensure_id, clear, set_css, add_extra_css, build_rule
from elementmaker import E
from book_list.item_list import build_list, create_item
from book_list.globals import get_session_data
from read_book.globals import default_color_schemes

# Colors {{{
add_extra_css(def():
    sel = 'ul.color-preferences-list'
    style = build_rule(sel, list_style_type='none', display='flex', flex_wrap='wrap')
    sel += ' > li'
    style += build_rule(sel, padding='1ex 1rem', margin='1ex 1rem', border_radius='4px', cursor='pointer', border='solid 1px currentColor')
    style += build_rule(sel + ' svg', visibility='hidden')
    sel += '.current-color'
    style += build_rule(sel + ' svg', visibility='visible')
    return style
)

def change_current_color(ev):
    ul = ev.currentTarget.parentNode
    for li in ul.childNodes:
        li.setAttribute('class', 'current-color' if li is ev.currentTarget else '')

def current_color_scheme(container):
    return container.querySelector('li.current-color').getAttribute('data-name')

def create_colors_panel(container):
    container.appendChild(E.p(_('Choose a color scheme below'), style='margin:1ex 1em; padding: 1ex 0'))
    all_schemes = {}
    for k in default_color_schemes:
        all_schemes[k] = default_color_schemes[k]
    sd = get_session_data()
    ucs = sd.get('user_color_schemes')
    for k in ucs:
        all_schemes[k] = ucs[k]
    ul = E.ul(class_='color-preferences-list')
    container.appendChild(ul)
    for name in sorted(all_schemes, key=def(k):all_schemes[k].name;):
        scheme = all_schemes[name]
        item = set_css(E.li(svgicon('check'), '\xa0' + scheme.name, data_name=name, onclick=change_current_color,
                            class_='current-color' if name is sd.get('current_color_scheme') else ''),
                       color=scheme.foreground, background_color=scheme.background)
        ul.appendChild(item)

def commit_colors(onchange, container):
    ccs = current_color_scheme(container)
    sd = get_session_data()
    if sd.get('current_color_scheme') is not ccs:
        sd.set('current_color_scheme', ccs)
        onchange()
# }}}

class Prefs:

    def __init__(self, container, close_func):
        self.close_func = close_func
        self.changes_occurred = False
        title = E.h2(_('Configure book reader'))
        self.title_id = ensure_id(title)
        container.appendChild(E.div(
            style='display: flex; justify-content: space-between; padding: 1ex 1em; border-bottom: solid 1px currentColor',
            title,
            E.div(svgicon('close'), onclick=self.onclose, style='cursor:pointer'),
        ))
        container.appendChild(E.div())
        self.container_id = ensure_id(container.lastChild)
        self.stack = v'["top"]'
        self.display_top(container.lastChild)

    def onchange(self):
        self.changes_occurred = True

    def onclose(self):
        if self.stack.length > 1:
            which = self.stack.pop()
            close_func = getattr(self, 'close_' + which, None)
            if close_func:
                close_func.bind(self)()
            self.display_panel(self.stack[-1])
        else:
            self.close_func()

    @property
    def container(self):
        return document.getElementById(self.container_id)

    def display_panel(self, which):
        container = self.container
        clear(container)
        getattr(self, 'display_' + which)(container)

    def show_panel(self, which):
        self.stack.push(which)
        self.display_panel(which)

    def display_top(self, container):
        c = E.div()
        container.appendChild(c)
        build_list(c, [
            create_item(_('Colors'), def():self.show_panel('colors');, _('Change the colors of the page and text')),
            create_item(_('Page Layout'), def():self.show_panel('layout');, _('Change the page margins and number of pages per screen')),
        ])

    def display_colors(self, container):
        document.getElementById(self.title_id).textContent = _('Colors')
        create_colors_panel(container)

    def close_colors(self):
        commit_colors(self.onchange, self.container)

    def display_layout(self, container):
        document.getElementById(self.title_id).textContent = _('Page Layout')


def create_prefs_panel(container, close_func):
    Prefs(container, close_func)

def develop(container):
    create_colors_panel(container)
