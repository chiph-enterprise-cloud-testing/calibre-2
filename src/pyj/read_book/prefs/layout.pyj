# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>
from __python__ import hash_literals, bound_methods

from gettext import gettext as _
from dom import add_extra_css, build_rule, unique_id, element
from book_list.globals import get_session_data
from elementmaker import E

CONTAINER = unique_id('reader-page-layout')
MARGINS = unique_id('reader-page-margins')
READ_MODE = unique_id('read-mode')

add_extra_css(def():
    sel = '#' + MARGINS
    style = build_rule(sel, margin_left='2em', margin_top='-1em')
    style += build_rule(sel + ' td', padding='1ex 1em')
    return style
)

def create_layout_panel(container):
    container.appendChild(E.div(id=CONTAINER))
    container = container.lastChild
    sd = get_session_data()
    container.appendChild(E.p(_('Change the page margins below'), style='margin:1ex 1rem; padding: 1ex 0'))
    container.appendChild(E.table(id=MARGINS))
    labels = {'top':_('Top:'), 'bottom':_('Bottom:'), 'left':_('Left:'), 'right':_('Right:')}
    for which in 'top bottom left right'.split(' '):
        container.lastChild.appendChild(E.tr(
            E.td(labels[which]), E.td(E.input(type='number', min='0', step='1', name=which, value=str(sd.get('margin_'+which))))
        ))

    container.appendChild(E.div(
        _('Choose the page layout mode. In paged mode, the text is split up into individual pages, as in a paper book. In flow mode'
          ' text is presented as one long scrolling page, as in web browsers.'),
        style='margin: 1ex 1rem; padding-top:1ex; border-top: solid 1px'))
    container.appendChild(E.div(id=READ_MODE, style='margin: 1ex 1rem; display: flex; justify-content: space-between'))
    rm = sd.get('read_mode')
    rm = 'flow' if rm is 'flow' else 'paged'
    def rb(name, text):
        d = container.lastChild
        d.appendChild(E.label(E.input(type='radio', name='page-layout-mode', checked=rm is name), text))
    rb('paged', _('Paged mode'))
    rb('flow', _('Flow mode'))

develop = create_layout_panel


def commit_layout(onchange, container):
    was_changed = False
    sd = get_session_data()
    for which in 'top bottom left right'.split(' '):
        i = element(MARGINS, '[name={}]'.format(which))
        try:
            val = int(i.value)
        except:
            continue
        if val is not sd.get('margin_' + which):
            was_changed = True
            sd.set('margin_' + which, val)
    rm = sd.get('read_mode')
    rm = 'flow' if rm is 'flow' else 'paged'
    crm = 'paged' if element(READ_MODE, 'input').checked else 'flow'
    if rm is not crm:
        was_changed = True
        sd.set('read_mode', crm)

    if was_changed:
        onchange()
