# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2018, Kovid Goyal <kovid at kovidgoyal.net>
from __python__ import bound_methods, hash_literals

from elementmaker import E
from gettext import gettext as _

from ajax import ajax, ajax_send
from book_list.book_details import report_load_failure
from book_list.library_data import load_status, url_books_query
from book_list.router import back, report_a_load_failure
from book_list.top_bar import create_top_bar, set_title
from book_list.ui import set_panel_handler
from dom import add_extra_css, build_rule
from utils import conditional_timeout, parse_url_params
from widgets import create_button

CLASS_NAME = 'convert-book-panel'
current_state = 'initializing'
overall_container_id = None
initializers = {}

add_extra_css(def():
    sel = '.' + CLASS_NAME + ' '
    style = build_rule(sel, placeholder='TODO: add this')
    return style
)


conversion_data = None
conversion_data_load_status = {'loading':True, 'ok':False, 'error_html':None, 'current_fetch':None}


def container_for_current_state():
    ans = document.getElementById(overall_container_id)
    if ans:
        return ans.querySelector(f'[data-state="{current_state}"]')


def on_conversion_started(end_type, xhr, ev):
    pass


def get_conversion_options(container):
    return conversion_data.conversion_options.options


def start_conversion():
    container = document.getElementById(conversion_data.container_id)
    data = {
        'input_fmt': container.querySelector('select[name="input_formats"]').value,
        'output_fmt': container.querySelector('select[name="output_formats"]').value,
        'options': get_conversion_options(container),
        'book_id': conversion_data.book_id,
    }
    query = url_books_query()
    ajax_send(f'/conversion/start/{conversion_data.book_id}', data, on_conversion_started, query=query)


def create_configuring_markup():
    ans = E.div(class_='top')

    def generate_choice(name):
        ans = E.select(name=name)
        return ans

    tcell = 'display: table-cell; padding-top: 1em; padding-left: 1em'

    start_conv = E.div(
        E.div(
            E.div(
                style='display: table-row',
                E.div(style=tcell, _('Input format:')),
                E.div(generate_choice('input_formats'), style=tcell),
            ),
            E.div(
                style='display: table-row',
                E.div(style=tcell, _('Output format:')),
                E.div(generate_choice('output_formats'), style=tcell),
            )
        ),
        E.div(
            style='margin: 1em',
            create_button(_('Start conversion'), action=start_conversion)
        )
    )
    ans.appendChild(start_conv)

    def initialize(container):
        for name in 'input_formats', 'output_formats':
            sel = container.querySelector(f'select[name="{name}"]')
            formats = conversion_data[name]
            for fmt in formats:
                sel.appendChild(E.option(fmt, value=fmt))

    return ans, initialize


# Initialization {{{

def on_data_loaded(end_type, xhr, ev):
    nonlocal conversion_data
    conversion_data_load_status.current_fetch = None
    conversion_data_load_status.loading = False
    conversion_data_load_status.ok = True
    conversion_data_load_status.error_html = None

    def bad_load(msg):
        conversion_data_load_status.ok = False
        conversion_data_load_status.error_html = msg or xhr.error_html

    if end_type is 'load':
        conversion_data = JSON.parse(xhr.responseText)
    elif end_type is 'abort':
        pass
    else:
        bad_load()


def fetch_conversion_data(book_id):
    nonlocal conversion_data
    if conversion_data_load_status.current_fetch:
        conversion_data_load_status.current_fetch.abort()
    conversion_data = None
    query = url_books_query()
    conversion_data_load_status.loading = True
    conversion_data_load_status.ok = False
    conversion_data_load_status.error_html = None
    conversion_data_load_status.current_fetch = ajax(f'conversion/book-data/{book_id}', on_data_loaded, query=query)
    conversion_data_load_status.current_fetch.send()


def on_close(container_id):
    back()


def check_for_data_loaded():
    nonlocal current_state
    container = this
    if load_status.loading or conversion_data_load_status.loading:
        conditional_timeout(container.id, 5, check_for_data_loaded)
        return
    container = container.lastChild
    if not load_status.ok:
        current_state = 'load-failure'
        report_load_failure(container_for_current_state())
    elif not conversion_data_load_status.ok:
        current_state = 'load-failure'
        report_a_load_failure(
            container_for_current_state(),
            _('Failed to load conversion data from calibre, with error:'),
        conversion_data_load_status.error_html)
    else:
        set_title(container.parentNode, _('Convert: {}').format(conversion_data.title))
        current_state = 'configuring'
    apply_state_to_markup()


def create_markup(container):
    container.appendChild(E.div(
        data_state='initializing', style='margin: 1ex 1em',
        E.div(_('Loading conversion data, please wait...'))
    ))
    container.appendChild(E.div(
        data_state='load-failure', style='margin: 1ex 1em',
    ))

    ccm, init = create_configuring_markup()
    ccm.dataset.state = 'configuring'
    container.appendChild(ccm)
    initializers[ccm.dataset.state] = init


def apply_state_to_markup():
    container = document.getElementById(overall_container_id)
    if container:
        for node in container.lastChild.childNodes:
            if node.dataset.state is current_state:
                node.style.display = 'block'
                if initializers[current_state]:
                    initializers[current_state](node)
            else:
                node.style.display = 'none'


def init(container_id):
    nonlocal overall_container_id
    container = document.getElementById(container_id)
    overall_container_id = container_id
    create_top_bar(container, title=_('Convert book'), action=on_close.bind(None, container_id), icon='close')
    container.appendChild(E.div(class_=CLASS_NAME))
    create_markup(container.lastChild)
    apply_state_to_markup()
    conditional_timeout(container_id, 5, check_for_data_loaded)
    q = parse_url_params()
    fetch_conversion_data(q.book_id)


set_panel_handler('convert_book', init)
# }}}
