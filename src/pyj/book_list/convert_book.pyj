# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2018, Kovid Goyal <kovid at kovidgoyal.net>
from __python__ import bound_methods, hash_literals

from elementmaker import E
from gettext import gettext as _

from ajax import ajax, ajax_send
from book_list.book_details import report_load_failure
from book_list.library_data import download_url, load_status, url_books_query
from book_list.router import back, open_book, report_a_load_failure
from book_list.top_bar import create_top_bar, set_title
from book_list.ui import set_panel_handler
from dom import add_extra_css, build_rule, clear
from modals import error_dialog
from utils import conditional_timeout, human_readable, parse_url_params
from widgets import create_button

CLASS_NAME = 'convert-book-panel'
current_state = 'initializing'
overall_container_id = None
initializers = {}

add_extra_css(def():
    sel = '.' + CLASS_NAME + ' '
    style = build_rule(sel, padding='1ex 1rem')
    style += build_rule(sel + 'h3', margin_bottom='1ex')
    return style
)


conversion_data = None
conversion_data_load_status = {'loading':True, 'ok':False, 'error_html':None, 'current_fetch':None}


def container_for_current_state():
    ans = document.getElementById(overall_container_id)
    if ans:
        return ans.querySelector(f'[data-state="{current_state}"]')


def create_converted_markup():

    def init(container):
        clear(container)
        container.appendChild(E.h3('Conversion successful!'))
        fmt = conversion_data.fmt.toUpperCase()
        book_id = int(conversion_data.book_id)

        def read_book():
            open_book(book_id, fmt)

        container.appendChild(E.div(
            style='margin-top: 1rem',
            create_button(_('Read {}').format(fmt), 'book', read_book),
            '\xa0',
            create_button(_('Download {}').format(fmt), 'cloud-download', download_url(book_id, fmt),
                            _('File size: {}').format(human_readable(conversion_data.size)),
                            download_filename=f'{conversion_data.title}.{fmt.toLowerCase()}')
        ))

    return E.div(), init


def report_conversion_ajax_failure(xhr):
    nonlocal current_state
    current_state = 'configuring'
    apply_state_to_markup()
    error_dialog(_('Failed to convert'), _(
        'Could not convert {}. Click "Show details" for more'
        ' information').format(conversion_data.title),
        xhr.error_html
    )


def show_failure(response):
    nonlocal current_state
    current_state = 'failed'
    apply_state_to_markup()
    c = container_for_current_state()
    clear(c)
    c.appendChild(E.h3(_('Conversion failed!')))
    c.appendChild(E.div(_('Error details below...')))
    c.appendChild(E.div('\xa0'))
    c.appendChild(E.div())
    c = c.lastChild
    if response.was_aborted:
        c.textContent = _(
            'Conversion of {} was taking too long, and has been aborted').format(conversion_data.title)
    else:
        log = ''
        if response.traceback:
            log += response.traceback
        if response.log:
            log += '\n\n' + _('Conversion log') + '\n\n'
            log += response.log
        c.appendChild(E.pre(log))


def on_conversion_status(end_type, xhr, ev):
    nonlocal current_state
    if current_state is not 'converting' or not container_for_current_state():
        return  # user clicked the back button similar
    if end_type is 'load':
        response = JSON.parse(xhr.responseText)
        if response.running:
            c = container_for_current_state()
            c.querySelector('progress').value = response.percent
            if response.msg:
                c.querySelector('.progress-msg').textContent = response.msg
            check_for_conversion_status()
        else:
            if response.ok:
                conversion_data.fmt = response.fmt
                conversion_data.size = response.size
                current_state = 'converted'
                apply_state_to_markup()
            else:
                show_failure(response)
    else:
        report_conversion_ajax_failure(xhr)


def check_for_conversion_status(abort_job):
    query = url_books_query()
    if abort_job:
        query.abort_job = '1'
    data = {}
    ajax_send(f'/conversion/status/{conversion_data.job_id}', data, on_conversion_status, query=query)


def on_conversion_started(end_type, xhr, ev):
    nonlocal current_state
    if end_type is 'load':
        conversion_data.job_id = JSON.parse(xhr.responseText)
        check_for_conversion_status()
    else:
        report_conversion_ajax_failure(xhr)


def get_conversion_options(container):
    return conversion_data.conversion_options.options


def create_converting_markup():
    ans = E.div(
        E.div(
            style='text-align: center; margin: auto',
            _('Converting, please wait...'),
            E.div(E.progress()),
            E.div('\xa0', class_='progress-msg'),
            E.div('\xa0'),
            E.div(_('Click the close button in the top left corner to abort the conversion')),
        )
    )

    def init(container):
        container.querySelector('progress').removeAttribute('value')

    return ans, init


def start_conversion():
    nonlocal current_state
    container = document.getElementById(overall_container_id)
    data = {
        'input_fmt': container.querySelector('select[name="input_formats"]').value,
        'output_fmt': container.querySelector('select[name="output_formats"]').value,
        'options': get_conversion_options(container),
        'book_id': conversion_data.book_id,
    }
    query = url_books_query()
    ajax_send(f'/conversion/start/{conversion_data.book_id}', data, on_conversion_started, query=query)
    current_state = 'converting'
    apply_state_to_markup()


def create_configuring_markup():
    ignore_changes = False
    ans = E.div()

    def on_format_change():
        nonlocal ignore_changes, current_state
        if ignore_changes:
            return
        input_fmt = container_for_current_state().querySelector('select[name="input_formats"]').value
        output_fmt = container_for_current_state().querySelector('select[name="output_formats"]').value
        current_state = 'initializing'
        conditional_timeout(overall_container_id, 5, check_for_data_loaded)
        q = parse_url_params()
        fetch_conversion_data(q.book_id, input_fmt, output_fmt)
        apply_state_to_markup()

    def generate_choice(name):
        ans = E.select(name=name)
        ans.addEventListener('change', on_format_change)
        return ans

    tcell = 'display: table-cell; padding-top: 1em; padding-left: 1em'

    start_conv = E.div(
        E.div(
            E.div(
                style='display: table-row',
                E.div(style=tcell, _('Input format:')),
                E.div(generate_choice('input_formats'), style=tcell),
            ),
            E.div(
                style='display: table-row',
                E.div(style=tcell, _('Output format:')),
                E.div(generate_choice('output_formats'), style=tcell),
            )
        ),
        E.div(
            style='margin: 1em',
            create_button(_('Start conversion'), action=start_conversion)
        )
    )
    ans.appendChild(start_conv)

    def initialize(container):
        nonlocal ignore_changes
        ignore_changes = True
        for name in 'input_formats', 'output_formats':
            sel = container.querySelector(f'select[name="{name}"]')
            clear(sel)
            formats = conversion_data[name]
            for fmt in formats:
                sel.appendChild(E.option(fmt, value=fmt))
        ignore_changes = False

    return ans, initialize


# Initialization {{{

def on_data_loaded(end_type, xhr, ev):
    nonlocal conversion_data
    conversion_data_load_status.current_fetch = None
    conversion_data_load_status.loading = False
    conversion_data_load_status.ok = True
    conversion_data_load_status.error_html = None

    def bad_load(msg):
        conversion_data_load_status.ok = False
        conversion_data_load_status.error_html = msg or xhr.error_html

    if end_type is 'load':
        conversion_data = JSON.parse(xhr.responseText)
    elif end_type is 'abort':
        pass
    else:
        bad_load()


def fetch_conversion_data(book_id, input_fmt, output_fmt):
    nonlocal conversion_data
    if conversion_data_load_status.current_fetch:
        conversion_data_load_status.current_fetch.abort()
    conversion_data = None
    query = url_books_query()
    if input_fmt:
        query.input_fmt = input_fmt
    if output_fmt:
        query.output_fmt = output_fmt
    conversion_data_load_status.loading = True
    conversion_data_load_status.ok = False
    conversion_data_load_status.error_html = None
    conversion_data_load_status.current_fetch = ajax(f'conversion/book-data/{book_id}', on_data_loaded, query=query)
    conversion_data_load_status.current_fetch.send()


def on_close(container_id):
    nonlocal current_state
    if current_state is 'converting':
        check_for_conversion_status(True)
    current_state = 'initializing'
    apply_state_to_markup()
    back()


def check_for_data_loaded():
    nonlocal current_state
    container = this
    if load_status.loading or conversion_data_load_status.loading:
        conditional_timeout(container.id, 5, check_for_data_loaded)
        return
    container = container.lastChild
    if not load_status.ok:
        current_state = 'load-failure'
        report_load_failure(container_for_current_state())
    elif not conversion_data_load_status.ok:
        current_state = 'load-failure'
        report_a_load_failure(
            container_for_current_state(),
            _('Failed to load conversion data from calibre, with error:'),
        conversion_data_load_status.error_html)
    else:
        set_title(container.parentNode, _('Convert: {}').format(conversion_data.title))
        current_state = 'configuring'
    apply_state_to_markup()


def create_markup(container):
    container.appendChild(E.div(
        data_state='initializing',
        E.div(_('Loading conversion data, please wait...'))
    ))
    container.appendChild(E.div(data_state='load-failure'))
    container.appendChild(E.div(data_state='failed'))

    ccm, init = create_configuring_markup()
    ccm.dataset.state = 'configuring'
    container.appendChild(ccm)
    initializers[ccm.dataset.state] = init

    conv, init = create_converting_markup()
    conv.dataset.state = 'converting'
    container.appendChild(conv)
    initializers[conv.dataset.state] = init

    conv, init = create_converted_markup()
    conv.dataset.state = 'converted'
    container.appendChild(conv)
    initializers[conv.dataset.state] = init


def apply_state_to_markup():
    container = document.getElementById(overall_container_id)
    if container:
        for node in container.lastChild.childNodes:
            if node.dataset.state is current_state:
                node.style.display = 'block'
                if initializers[current_state]:
                    initializers[current_state](node)
            else:
                node.style.display = 'none'


def init(container_id):
    nonlocal overall_container_id
    container = document.getElementById(container_id)
    overall_container_id = container_id
    create_top_bar(container, title=_('Convert book'), action=on_close.bind(None, container_id), icon='close')
    container.appendChild(E.div(class_=CLASS_NAME))
    create_markup(container.lastChild)
    apply_state_to_markup()
    conditional_timeout(container_id, 5, check_for_data_loaded)
    q = parse_url_params()
    fetch_conversion_data(q.book_id)


set_panel_handler('convert_book', init)
# }}}
