# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2018, Kovid Goyal <kovid at kovidgoyal.net>
from __python__ import bound_methods, hash_literals

from elementmaker import E
from gettext import gettext as _

from dom import add_extra_css, build_rule, ensure_id
from utils import safe_set_inner_html
from widgets import create_button

CLASS_NAME = 'conversion-option-group'
indent = 'â†³\xa0'

add_extra_css(def():
    style = ''
    sel = '.' + CLASS_NAME + ' '
    style += build_rule(sel + 'input[type="checkbox"]', margin_left='0')
    style += build_rule(sel + '[data-option-name]', margin_bottom='1ex', display='block', padding_bottom='0.5ex')
    style += build_rule(sel + '.simple-group > label', display='table-row')
    style += build_rule(sel + '.simple-group > label > *', display='table-cell', padding_bottom='1ex', padding_right='1rem')
    style += build_rule(sel + 'label.vertical', display='block')
    style += build_rule(sel + 'label.vertical > *', display='block', padding_bottom='1ex', padding_right='1rem')
    style += build_rule(sel + '[data-profile]', margin_left='2em', text_indent='-2em', font_size='smaller', margin_bottom='1ex')
    return style
)


# globals {{{
container_id = None
get_option_value = get_option_default_value = is_option_disabled = get_option_help = profiles = None
entry_points = {}
registry = {}
listeners = {}


def ep(func):
    entry_points[func.name] = func
    return func


def add_listener(name, callback):
    if not listeners[name]:
        listeners[name] = v'[]'
    listeners[name].push(callback)


def on_change(name):
    if listeners[name]:
        for callback in listeners[name]:
            callback(name)


def sanitize_accelerator(text):
    return text.replace('&', '')
# }}}

def create_simple_widget(name, text, tooltip, input_widget_, getter, setter, suffix):  # {{{
    if get_option_default_value(name) is undefined:
        raise KeyError(f'{name} is not a known option')
    if not text.endswith(':'):
        text = text + ':'
    label = E.label(E.span(sanitize_accelerator(text)), E.span(input_widget_))
    if suffix:
        label.lastChild.appendChild(document.createTextNode('\xa0' + suffix))
    label.dataset.optionName = name
    label.setAttribute('title', tooltip or get_option_help(name))

    def straight_input_widget(container):
        return container.lastChild.firstChild

    input_widget = straight_input_widget

    ops = {
        'get': def (container):
            return getter(input_widget(container))
        ,
        'set': def (container, val):
            setter(input_widget(container), val)
        ,
        'set_disabled': def (container, val):
            if val:
                container.classList.add('disabled')
                input_widget(container).setAttribute('disabled', 'disabled')
            else:
                container.classList.remove('disabled')
                input_widget(container).removeAttribute('disabled')
    }
    registry[name] = ops
    ops.set(label, get_option_value(name))
    ops.set(label, get_option_value(name))
    if is_option_disabled(name):
        ops.set_disabled(label, True)
    input_widget(label).addEventListener('change', on_change.bind(None, name))
    if listeners[name]:
        window.setTimeout(on_change.bind(None, name), 0)
    return label
# }}}

def checkbox(name, text, tooltip):  # {{{
    return create_simple_widget(name, text, tooltip, E.input(type='checkbox'),
        def getter(w):  # noqa: unused-local
            return bool(w.checked)
        ,
        def setter(w, val):  # noqa: unused-local
            w.checked = bool(val)
        ,
    )
# }}}

def lineedit(name, text, width=25, tooltip=None, suffix=None):  # {{{
    return create_simple_widget(name, text, tooltip, E.input(type='text', size=str(width)),
            def getter(w):  # noqa: unused-local
                ans = w.value
                if ans and ans.strip():
                    return ans.strip()
            ,
            def setter(w, val):  # noqa: unused-local
                w.value = val or ''
            , suffix=suffix
    )
# }}}

def float_spin(name, text, tooltip=None, step=0.1, min=0, max=100, unit=None):  # {{{
    f = E.input(type='number', step=str(step), min=str(min), max=str(max), required=True)
    defval = get_option_default_value(name)
    return create_simple_widget(name, text, tooltip, f,
        def getter(w):  # noqa: unused-local
            try:
                return float(w.value)
            except:
                return defval
        ,
        def setter(w, val):  # noqa: unused-local
            w.value = str(float(val))
        ,
        suffix=unit
    )
# }}}

def choices(name, text, choices, tooltip):  # {{{
    f = E.select()
    if Array.isArray(choices):
        for key in choices:
            f.appendChild(E.option(key, value=key))
    else:
        for key in choices:
            f.appendChild(E.option(choices[key], value=key))

    return create_simple_widget(name, text, tooltip, f,
        def getter(w):  # noqa: unused-local
            return w.value
        ,
        def setter(w, val):  # noqa: unused-local
            w.value = val
    )
# }}}

def textarea(name, text, tooltip):  # {{{
    ans = create_simple_widget(name, text, tooltip, E.textarea(rows='30', cols='70'),
            def getter(w):  # noqa: unused-local
                ans = w.value
                if ans and ans.strip():
                    return ans.strip()
            ,
            def setter(w, val):  # noqa: unused-local
                w.value = val or ''
    )
    ans.classList.add('vertical')
    return ans
# }}}

def container_for_option(name):
    return document.getElementById(container_id).querySelector(f'[data-option-name="{name}"]')


def get(name):
    return registry[name].get(container_for_option(name))


def set(name, val):
    registry[name].set(container_for_option(name), val)


def set_disabled(name, val):
    registry[name].set_disabled(container_for_option(name), val)


# Look & feel {{{
@ep
def look_and_feel(container):
    def subhead(text):
        container.appendChild(E.div(
            style='border-bottom: solid 1px currentColor; margin-bottom: 1ex; max-width: 35em', E.b(sanitize_accelerator(text))))

    subhead(_('&Fonts'))
    add_listener('disable_font_rescaling', def (name):
        disabled = get('disable_font_rescaling')
        for dname in 'font_size_mapping', 'base_font_size':
            set_disabled(dname, disabled)
    )
    g = E.div(class_='simple-group')
    container.appendChild(g)
    g.appendChild(checkbox('disable_font_rescaling', _('&Disable font size rescaling')))
    g.appendChild(float_spin('base_font_size', _('Base font si&ze:'), max=50, unit='pt'))
    g.appendChild(lineedit('font_size_mapping', _('Font size &key:')))
    g.appendChild(float_spin('minimum_line_height', _('Minim&um line height:'), max=900, unit='%'))
    g.appendChild(float_spin('line_height', _('Line hei&ght:'), unit='%'))
    g.appendChild(lineedit('embed_font_family', _('Embed font fami&ly:')))
    g.appendChild(checkbox('embed_all_fonts', _('&Embed all fonts in document')))
    g.appendChild(checkbox('subset_embedded_fonts', _('&Subset all embedded fonts')))
    g.appendChild(checkbox('keep_ligatures', _('Keep &ligatures')))

    subhead(_('Te&xt'))
    g = E.div(class_='simple-group')
    container.appendChild(g)
    g.appendChild(lineedit('input_encoding', _('I&nput character encoding:')))
    g.appendChild(choices('change_justification', _('Text &justification:'),
        {'original': _('Original'), 'left': _('Left align'), 'justify': _('Justify text')}
    ))
    g.appendChild(checkbox('smarten_punctuation', _('Smarten &punctuation')))
    g.appendChild(checkbox('unsmarten_punctuation', _('&UnSmarten punctuation')))
    g.appendChild(checkbox('asciiize', _('&Transliterate unicode characters to ASCII')))

    subhead(_('Lay&out'))
    add_listener('remove_paragraph_spacing', def (name):
        disabled = get('remove_paragraph_spacing')
        set_disabled('remove_paragraph_spacing_indent_size', not disabled)
    )
    g = E.div(class_='simple-group')
    container.appendChild(g)
    g.appendChild(checkbox('remove_paragraph_spacing', _('Remove &spacing between paragraphs')))
    g.appendChild(float_spin('remove_paragraph_spacing_indent_size', indent + _('I&ndent size:'), min=-0.1, unit='em'))
    g.appendChild(checkbox('insert_blank_line', _('Insert &blank line between paragraphs')))
    g.appendChild(float_spin('insert_blank_line_size', indent + _('&Line size:'), unit='em'))
    g.appendChild(checkbox('linearize_tables', _('&Linearize tables')))

    subhead(_('St&yling'))
    g = E.div(class_='simple-group')
    container.appendChild(g)
    g.appendChild(lineedit('filter_css', _('Filter Style Information'), 40))
    container.appendChild(textarea('extra_css', 'E&xtra CSS'))
# }}}

# Heuristics {{{
@ep
def heuristics(container):
    settings = v'[]'
    def add(func, name, text, **kw):
        g.appendChild(func(name, text, **kw))
        settings.push(name)

    add_listener('enable_heuristics', def (name):
        disabled = not get('enable_heuristics')
        for dname in settings:
            set_disabled(dname, disabled)
    )
    blurb = _(
    '<b>Heuristic processing</b> means that calibre will scan your book for common patterns and fix them.'
    ' As the name implies, this involves guesswork, which means that it could end up worsening the result'
    ' of a conversion, if calibre guesses wrong. Therefore, it is disabled by default. Often, if a conversion'
    ' does not turn out as you expect, turning on heuristics can improve matters. Read more about the various'
    ' heuristic processing options in the <a href="%s">User Manual</a>.''').replace(
        '%s', 'https://manual.calibre-ebook.com/conversion.html#heuristic-processing')
    container.appendChild(E.div(style='margin-bottom: 1ex'))
    safe_set_inner_html(container.lastChild, blurb)
    g = E.div(class_='simple-group')
    container.appendChild(g)
    g.appendChild(checkbox('enable_heuristics', _('Enable &heuristic processing')))
    add(checkbox, 'unwrap_lines', _('Unwrap lines'))
    add(float_spin, 'html_unwrap_factor', indent + _('Line &un-wrap factor:'), max=1, step=0.05)

    add(checkbox, 'markup_chapter_headings', _('Detect and markup unformatted chapter headings and sub headings'))
    add(checkbox, 'renumber_headings', _('Renumber sequences of <h1> or <h2> tags to prevent splitting'))
    add(checkbox, 'delete_blank_paragraphs', _('Delete blank lines between paragraphs'))
    add(checkbox, 'format_scene_breaks', _('Ensure scene breaks are consistently formatted'))
    add(lineedit, 'replace_scene_breaks', _('Rep&lace soft scene breaks:'))
    add(checkbox, 'dehyphenate', _('Remove unnecessary hyphens'))
    add(checkbox, 'italicize_common_cases', _('Italicize common words and patterns'))
    add(checkbox, 'fix_indents', _('Replace entity indents with CSS indents'))
# }}}

# Page setup {{{
@ep
def page_setup(container):
    def show_profile_desc(name):
        profile = get(name)
        data = profiles.input if name is 'input_profile' else profiles.output
        profile = data[profile]
        container_for_option(name).parentNode.querySelector('[data-profile="{}"'.format(
            'input' if name is 'input_profile' else 'output')).textContent = indent + profile.description

    add_listener('input_profile', show_profile_desc)
    add_listener('output_profile', show_profile_desc)
    g = E.div(class_='simple-group')
    container.appendChild(g)
    g.appendChild(float_spin('margin_left', _('Left page margin'), unit='pt', step=0.1, min=-1, max=200))
    g.appendChild(float_spin('margin_top', _('Top page margin'), unit='pt', step=0.1, min=-1, max=200))
    g.appendChild(float_spin('margin_right', _('Right page margin'), unit='pt', step=0.1, min=-1, max=200))
    g.appendChild(float_spin('margin_bottom', _('Bottom page margin'), unit='pt', step=0.1, min=-1, max=200))
    g.appendChild(choices('input_profile', _('&Input profile:'), {name: profiles.input[name].name for name in profiles.input}))
    g.appendChild(E.div(data_profile='input'))
    g.appendChild(choices('output_profile', _('&Output profile:'), {name: profiles.output[name].name for name in profiles.output}))
    g.appendChild(E.div(data_profile='output'))
# }}}

# Structure detection {{{
@ep
def structure_detection(container):
    g = E.div(class_='simple-group')
    container.appendChild(g)
    g.appendChild(lineedit('chapter', _('Detect chapters at'), 50))
    g.appendChild(choices('chapter_mark', _('Chap&ter mark:'), ['pagebreak', 'rule', 'both', 'none']))
    g.appendChild(checkbox('remove_first_image', _('Remove first &image')))
    g.appendChild(checkbox('remove_fake_margins', _('Remove &fake margins')))
    g.appendChild(checkbox('insert_metadata', _('Insert metadata at start of book')))
    g.appendChild(lineedit('page_breaks_before', _('Insert page breaks before'), 50))
    g.appendChild(lineedit('start_reading_at', _('Start reading at'), 50))
# }}}

def create_option_group(group_name, profiles_, container, get_option_value_, get_option_default_value_, is_option_disabled_, get_option_help_, on_close):
    nonlocal get_option_value, get_option_default_value, is_option_disabled, container_id, registry, listeners, get_option_help, profiles
    get_option_value, get_option_default_value, is_option_disabled, get_option_help = get_option_value_, get_option_default_value_, is_option_disabled_, get_option_help_
    profiles = profiles_
    registry = {}
    listeners = {}
    container_id = ensure_id(container)
    container.classList.add(CLASS_NAME)
    entry_points[group_name](container)
    container.appendChild(E.div(
        style='margin-top: 2ex',
        create_button(_('Back to conversion page'), action=on_close)
    ))


def commit_changes(set_option_value):
    for name in registry:
        set_option_value(name, get(name))
