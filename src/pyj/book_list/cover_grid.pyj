# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2016, Kovid Goyal <kovid at kovidgoyal.net>
from __python__ import hash_literals, bound_methods

from dom import clear, set_css, build_rule, unique_id
from elementmaker import E
from gettext import gettext as _

THUMBNAIL_MAX_WIDTH = 300
THUMBNAIL_MAX_HEIGHT = 400

COVER_GRID = unique_id('cover-grid')

def cover_grid_css(sel):
    ans =  build_rule(f'{sel} #{COVER_GRID} > div:hover', transform='scale(1.2)')
    ans += build_rule(f'{sel} #{COVER_GRID} > div:active', transform='scale(2)')
    return ans

def init(container):
    clear(container)
    div = E.div(id=COVER_GRID)
    set_css(div, display='flex', flex_wrap='wrap', justify_content='space-around', align_items='flex-end', align_content='flex-start', user_select='none', overflow='hidden')
    container.appendChild(div)

def on_img_load_error(err):
    img = err.target
    div = img.parentNode
    if not div:
        return
    clear(div)
    div.appendChild(E.div(
        style='position:relative; top:-50%; transform: translateY(50%)',
        E.h2(img.getAttribute('data-title'), style='text-align:center; font-size:larger; font-weight: bold'),
        E.div(_('by'), style='text-align: center'),
        E.h2(img.getAttribute('data-authors'), style='text-align:center; font-size:larger; font-weight: bold')
    ))
    set_css(div, border='dashed 1px currentColor', border_radius='10px')

def create_item(book_id, interface_data, onclick):
    cover_url = 'get/thumb/{}/{}?sz={}x{}'.format(book_id, interface_data['library_id'], Math.ceil(THUMBNAIL_MAX_WIDTH*window.devicePixelRatio), Math.ceil(THUMBNAIL_MAX_HEIGHT*window.devicePixelRatio))
    metadata = interface_data['metadata'][book_id]
    alt = _('{} by {}').format(metadata['title'], metadata['authors'].join(' & '))
    img = E.img(src=cover_url, alt=alt, title=alt, data_title=metadata['title'], data_authors=metadata['authors'].join(' & '),
                style='max-width: 100%; max-height: 100%; display: block; width:auto; height:auto; border-radius: 10px')
    img.onerror = on_img_load_error

    ans = E.div(
        style=('margin: 10px; display: flex; align-content: flex-end; align-items: flex-end; justify-content: space-around;'
                'width: 21vw; height: 28vw; max-width: {}px; max-height: {}px; min-width: {}px; min-height: {}px; cursor:pointer').format(
                            THUMBNAIL_MAX_WIDTH, THUMBNAIL_MAX_HEIGHT, THUMBNAIL_MAX_WIDTH // 2, THUMBNAIL_MAX_HEIGHT // 2),
        data_book_id=str(book_id),
        img
    )
    ans.addEventListener('click', onclick)
    return ans

def append_item(container, item):
    container.firstChild.appendChild(item)

