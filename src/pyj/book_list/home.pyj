# vim:fileencoding=utf-8
# License: GPL v3 Copyright: 2017, Kovid Goyal <kovid at kovidgoyal.net>
from __python__ import hash_literals, bound_methods

from dom import ensure_id, add_extra_css, build_rule
from elementmaker import E
from session import get_interface_data
from gettext import gettext as _
from utils import conditional_timeout

from book_list.globals import get_db
from book_list.cover_grid import BORDER_RADIUS
from book_list.top_bar import create_top_bar
from book_list.ui import set_default_panel_handler, show_panel
from book_list.router import update_window_title, open_book


CLASS_NAME = 'home-page'

add_extra_css(def():
    ans = ''
    sel = f'.{CLASS_NAME} '
    ans += build_rule(f'{sel} h2', padding='1em', font_size='1.5em')
    sel += '.recently-read img'
    ans += build_rule(sel, max_width='25vw', height='auto', border_radius=f'{BORDER_RADIUS}px')
    ans += build_rule(f'{sel}:hover', transform='scale(1.2)')
    ans += build_rule(f'{sel}:active', transform='scale(2)')
    return ans
)


def show_cover(blob, name, mt, book):
    img = document.getElementById(this)
    if not img:
        return
    img.onload = def():
        window.URL.revokeObjectURL(this.src)
    img.src = window.URL.createObjectURL(blob)


def read_book(library_id, book_id, fmt):
    open_book(book_id, fmt, library_id)


def show_recent_stage2(books):
    container = document.getElementById(this)
    if not container or not books.length:
        return
    container.style.display = 'block'
    container.style.borderBottom = 'solid 1px currentColor'
    container.style.paddingBottom = '1em'
    container.appendChild(E.h2(_(
        'Continue reading…')))
    container.appendChild(E.div(style='display:flex'))
    images = container.lastChild
    db = get_db()
    for book in books:
        img = E.img(
            alt=_('{} by {}').format(book.metadata.title, book.metadata.authors.join(' & '))
        )
        img_id = ensure_id(img)
        images.appendChild(E.div(style='margin: 0 1em',
            E.a(img, href='javascript: void(0)', title=img.alt,
                onclick=read_book.bind(None, book.key[0], book.key[1], book.key[2])
            ),
        ))
        if book.cover_name:
            db.get_file(book, book.cover_name, show_cover.bind(img_id))


def show_recent():
    container = this
    db = get_db()
    if not db.initialized:
        conditional_timeout(container.id, 5, show_recent)
        return
    db.get_recently_read_books(show_recent_stage2.bind(container.id))


def init(container_id):
    update_window_title()
    container = document.getElementById(container_id)
    container.classList.add(CLASS_NAME)
    create_top_bar(container, run_animation=True)
    interface_data = get_interface_data()

    # Recent books
    recent = E.div(style='display:none', class_='recently-read')
    recent_container_id = ensure_id(recent)
    container.appendChild(recent)
    conditional_timeout(recent_container_id, 5, show_recent)

    # Choose library
    cl = E.div(
        E.h2(_('Choose the calibre library to browse…'))
    )
    container.appendChild(cl)
    lids = sorted(interface_data.library_map, key=def(x): return interface_data.library_map[x];)
    for library_id in lids:
        library_name = interface_data.library_map[library_id]
        if library_name:
            cl.appendChild(E.div(E.a(library_name, href='javascript: void(0)', title=library_name, data_lid=library_id, onclick=def(ev):
                lib_id = ev.currentTarget.dataset.lid
                show_panel('book_list', {'library_id': lib_id})
            )))


set_default_panel_handler(init)
